{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { history } from '../history';\nimport LoginComponent from './LoginComponent';\nimport LoginWrapper from './Login.style';\nimport { startLogin, loginFailure } from './LoginActions';\n\nclass LoginContainer extends React.Component {\n  componentDidMount() {\n    // Redirect the user if he is already logged in\n    if (this.props.IS_AUTH) {\n      history.push('/tasks/new');\n    }\n\n    sessionStorage.clear();\n  }\n\n  constructor() {\n    super();\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.handleFailure = this.handleFailure.bind(this);\n  } // Register login success in the application reducer\n\n\n  handleSuccess(response) {\n    // this.props.startLogin(response.tokenId);\n    this.props.startLogin();\n  } // Register login failure on the application reducer\n\n\n  handleFailure(response) {\n    this.props.loginFailure();\n    history.push('/');\n  }\n\n  render() {\n    return __jsx(LoginWrapper, null, __jsx(LoginComponent, {\n      handleSuccess: this.handleSuccess,\n      handleFailure: this.handleFailure,\n      is_auth_attempt: this.props.IS_AUTH_ATTEMPT\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    IS_AUTH: state.LOGINREDUCER.ISAUTH,\n    IS_AUTH_ATTEMPT: state.LOGINREDUCER.ISAUTHATTEMPT\n  };\n}\n\nconst mapDispatchToProps = {\n  startLogin,\n  loginFailure\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","map":{"version":3,"sources":["/home/mordortech/Documents/Mordor/Projects/inventory/pages/Login/LoginContainer.js"],"names":["React","connect","history","LoginComponent","LoginWrapper","startLogin","loginFailure","LoginContainer","Component","componentDidMount","props","IS_AUTH","push","sessionStorage","clear","constructor","handleSuccess","bind","handleFailure","response","render","IS_AUTH_ATTEMPT","mapStateToProps","state","LOGINREDUCER","ISAUTH","ISAUTHATTEMPT","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,gBAAzC;;AAEA,MAAMC,cAAN,SAA6BP,KAAK,CAACQ,SAAnC,CAA6C;AAE3CC,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAG,KAAKC,KAAL,CAAWC,OAAd,EAAuB;AACrBT,MAAAA,OAAO,CAACU,IAAR,CAAa,YAAb;AACD;;AACDC,IAAAA,cAAc,CAACC,KAAf;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACD,GAd0C,CAgB3C;;;AACAD,EAAAA,aAAa,CAACG,QAAD,EAAW;AACtB;AACA,SAAKT,KAAL,CAAWL,UAAX;AACD,GApB0C,CAsB3C;;;AACAa,EAAAA,aAAa,CAACC,QAAD,EAAW;AACtB,SAAKT,KAAL,CAAWJ,YAAX;AACAJ,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACL,WACE,MAAC,YAAD,QACE,MAAC,cAAD;AACE,MAAA,aAAa,EAAE,KAAKJ,aADtB;AAEE,MAAA,aAAa,EAAE,KAAKE,aAFtB;AAGE,MAAA,eAAe,EAAE,KAAKR,KAAL,CAAWW;AAH9B,MADF,CADF;AASH;;AAtC0C;;AAyC7C,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLZ,IAAAA,OAAO,EAAEY,KAAK,CAACC,YAAN,CAAmBC,MADvB;AAELJ,IAAAA,eAAe,EAAEE,KAAK,CAACC,YAAN,CAAmBE;AAF/B,GAAP;AAID;;AAED,MAAMC,kBAAkB,GAAG;AACzBtB,EAAAA,UADyB;AAEzBC,EAAAA;AAFyB,CAA3B;AAKA,eAAeL,OAAO,CAACqB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CpB,cAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { history } from '../history';\nimport LoginComponent from './LoginComponent';\nimport LoginWrapper from './Login.style';\nimport { startLogin, loginFailure } from './LoginActions';\n\nclass LoginContainer extends React.Component {\n\n  componentDidMount() {\n    // Redirect the user if he is already logged in\n    if(this.props.IS_AUTH) {\n      history.push('/tasks/new');\n    }\n    sessionStorage.clear();\n  }\n\n  constructor() {\n    super();\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.handleFailure = this.handleFailure.bind(this);\n  }\n\n  // Register login success in the application reducer\n  handleSuccess(response) {\n    // this.props.startLogin(response.tokenId);\n    this.props.startLogin();\n  }\n\n  // Register login failure on the application reducer\n  handleFailure(response) {\n    this.props.loginFailure();\n    history.push('/');\n  }\n\n  render() {\n      return (\n        <LoginWrapper>\n          <LoginComponent\n            handleSuccess={this.handleSuccess}\n            handleFailure={this.handleFailure}\n            is_auth_attempt={this.props.IS_AUTH_ATTEMPT}\n          />\n        </LoginWrapper>\n      );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    IS_AUTH: state.LOGINREDUCER.ISAUTH,\n    IS_AUTH_ATTEMPT: state.LOGINREDUCER.ISAUTHATTEMPT\n  }\n}\n\nconst mapDispatchToProps = {\n  startLogin,\n  loginFailure,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);"]},"metadata":{},"sourceType":"module"}