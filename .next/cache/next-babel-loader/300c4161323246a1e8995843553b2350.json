{"ast":null,"code":"import * as Msal from 'msal';\nimport CryptoJS from 'crypto-js';\nimport axios from 'axios';\nimport { notification } from 'antd';\nimport config from '../../config/api';\nimport { setToken } from '../../config/axios';\nimport { loginRequest, loginSuccess, loginFailure } from './LoginActions';\nimport { history } from '../../history';\nvar msalConfig = {\n  auth: {\n    clientId: '4a15d7d8-bd7a-4e72-a738-273afb93ff7f',\n    //This is your client ID\n    authority: \"https://login.microsoftonline.com/058ffa1f-5c51-45d3-89a5-cff53e844deb\" //This is your tenant info\n\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nvar graphConfig = {\n  graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n}; // create a request object for login or token request calls\n// In scenarios with incremental consent, the request object can be further customized\n\nvar requestObj = {\n  scopes: [\"user.read\"]\n};\nvar myMSALObj = new Msal.UserAgentApplication(msalConfig); // Register Callbacks for redirect flow\n// myMSALObj.handleRedirectCallbacks(acquireTokenRedirectCallBack, acquireTokenErrorRedirectCallBack);\n\nmyMSALObj.handleRedirectCallback(authRedirectCallBack);\nexport var signIn = function signIn(dispatch) {\n  myMSALObj.loginPopup(requestObj).then(function (loginResponse) {\n    //Successful login\n    showWelcomeMessage(); //Call MS Graph using the token in the response\n\n    acquireTokenPopupAndCallMSGraph(dispatch);\n  })[\"catch\"](function (error) {\n    //Please check the console for errors\n    console.log(error);\n  });\n};\nexport var signOut = function signOut() {\n  myMSALObj.logout();\n};\n\nfunction acquireTokenPopupAndCallMSGraph(dispatch) {\n  if (!dispatch) return; //Always start with acquireTokenSilent to obtain a token in the signed in user from cache\n\n  myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {\n    callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback, dispatch);\n  })[\"catch\"](function (error) {\n    console.log(error); // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)\n    // Call acquireTokenPopup(popup window) \n\n    if (requiresInteraction(error.errorCode)) {\n      myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {\n        callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback, dispatch);\n      })[\"catch\"](function (error) {\n        console.log(error);\n      });\n    }\n  });\n}\n\nfunction callMSGraph(theUrl, accessToken, callback, dispatch) {\n  var xmlHttp = new XMLHttpRequest();\n\n  xmlHttp.onreadystatechange = function () {\n    if (this.readyState == 4 && this.status == 200) callback(JSON.parse(this.responseText), dispatch);\n  };\n\n  xmlHttp.open(\"GET\", theUrl, true); // true for asynchronous\n\n  xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);\n  xmlHttp.send();\n}\n\nfunction graphAPICallback(data, dispatch) {\n  console.log(data, \"----------------------\");\n\n  if (!(typeof data.mail === 'string' && data.mail.length)) {\n    alert('You do not have access to this application!');\n    return;\n  }\n\n  var header = {\n    \"alg\": \"HS256\",\n    \"typ\": \"JWT\"\n  };\n  var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\n  var encodedHeader = base64url(stringifiedHeader);\n  var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  var encodedData = base64url(stringifiedData);\n  var token = encodedHeader + \".\" + encodedData; // with secret\n\n  var secret = \"9Us5BmR1ovVvMX88CZ89Assj730paYOBROdbfmOmOL3DLwAZJueWS\";\n  var signature = CryptoJS.HmacSHA256(token, secret);\n  signature = base64url(signature);\n  var signedToken = token + \".\" + signature;\n  dispatch(loginRequest());\n  axios({\n    method: 'post',\n    url: \"\".concat(config.api.base_url, \"/api/auth/ms-login\"),\n    data: {\n      ms_token: signedToken\n    }\n  }).then(function (response) {\n    dispatch(loginSuccess(response.data));\n    setToken(response.data.token);\n    sessionStorage.setItem('user_token', response.data.token);\n    var default_route = response.data.user.department === 'SALES' || response.data.user.designation === 'POC' ? 'new' : 'active';\n    history.push('/tasks/' + default_route);\n  })[\"catch\"](function (error) {\n    console.error(error);\n    notification.error({\n      duration: 2,\n      message: 'Error',\n      description: 'Login Failure. Please try again or contact an administrator.'\n    });\n    dispatch(loginFailure());\n  });\n}\n\nfunction showWelcomeMessage() {} // var divWelcome = document.getElementById('WelcomeMessage');\n// divWelcome.innerHTML = \"Welcome \" + myMSALObj.getAccount().userName + \" to Microsoft Graph API\";\n// var loginbutton = document.getElementById('SignIn');\n// loginbutton.innerHTML = 'Sign Out';\n// loginbutton.setAttribute('onclick', 'signOut();');\n//This function can be removed if you do not need to support IE\n\n\nfunction acquireTokenRedirectAndCallMSGraph() {\n  //Always start with acquireTokenSilent to obtain a token in the signed in user from cache\n  myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {\n    callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);\n  })[\"catch\"](function (error) {\n    console.log(error); // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)\n    // Call acquireTokenRedirect\n\n    if (requiresInteraction(error.errorCode)) {\n      myMSALObj.acquireTokenRedirect(requestObj);\n    }\n  });\n}\n\nfunction authRedirectCallBack(error, response) {\n  if (error) {\n    console.log(error);\n  } else {\n    if (response.tokenType === \"access_token\") {\n      callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);\n    }\n  }\n}\n\nfunction requiresInteraction(errorCode) {\n  if (!errorCode || !errorCode.length) {\n    return false;\n  }\n\n  return errorCode === \"consent_required\" || errorCode === \"interaction_required\" || errorCode === \"login_required\";\n}\n\nfunction base64url(source) {\n  // Encode in classical base64\n  var encodedSource = CryptoJS.enc.Base64.stringify(source); // Remove padding equal characters\n\n  encodedSource = encodedSource.replace(/=+$/, ''); // Replace characters according to base64url specifications\n\n  encodedSource = encodedSource.replace(/\\+/g, '-');\n  encodedSource = encodedSource.replace(/\\//g, '_');\n  return encodedSource;\n} // Browser check variables\n\n\nvar ua = window.navigator.userAgent;\nvar msie = ua.indexOf('MSIE ');\nvar msie11 = ua.indexOf('Trident/');\nvar msedge = ua.indexOf('Edge/');\nvar isIE = msie > 0 || msie11 > 0;\nvar isEdge = msedge > 0; //If you support IE, our recommendation is that you sign-in using Redirect APIs\n//If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\n// can change this to default an experience outside browser use\n\nvar loginType = isIE ? \"REDIRECT\" : \"POPUP\"; // runs on page load, change config to try different login types to see what is best for your application\n\nif (loginType === 'POPUP') {\n  if (myMSALObj.getAccount()) {\n    // avoid duplicate code execution on page load in case of iframe and popup window.\n    showWelcomeMessage();\n    acquireTokenPopupAndCallMSGraph();\n  }\n} else if (loginType === 'REDIRECT') {\n  document.getElementById(\"SignIn\").onclick = function () {\n    myMSALObj.loginRedirect(requestObj);\n  };\n\n  if (myMSALObj.getAccount() && !myMSALObj.isCallback(window.location.hash)) {\n    // avoid duplicate code execution on page load in case of iframe and popup window.\n    showWelcomeMessage();\n    acquireTokenRedirectAndCallMSGraph();\n  }\n} else {\n  console.error('Please set a valid login type');\n}","map":{"version":3,"sources":["/home/mordortech/Documents/Mordor/Projects/inventory/pages/Login/MsLoginConfig.js"],"names":["Msal","CryptoJS","axios","notification","config","setToken","loginRequest","loginSuccess","loginFailure","history","msalConfig","auth","clientId","authority","cache","cacheLocation","storeAuthStateInCookie","graphConfig","graphMeEndpoint","requestObj","scopes","myMSALObj","UserAgentApplication","handleRedirectCallback","authRedirectCallBack","signIn","dispatch","loginPopup","then","loginResponse","showWelcomeMessage","acquireTokenPopupAndCallMSGraph","error","console","log","signOut","logout","acquireTokenSilent","tokenResponse","callMSGraph","accessToken","graphAPICallback","requiresInteraction","errorCode","acquireTokenPopup","theUrl","callback","xmlHttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","open","setRequestHeader","send","data","mail","length","alert","header","stringifiedHeader","enc","Utf8","stringify","encodedHeader","base64url","stringifiedData","encodedData","token","secret","signature","HmacSHA256","signedToken","method","url","api","base_url","ms_token","response","sessionStorage","setItem","default_route","user","department","designation","push","duration","message","description","acquireTokenRedirectAndCallMSGraph","acquireTokenRedirect","tokenType","source","encodedSource","Base64","replace","ua","window","navigator","userAgent","msie","indexOf","msie11","msedge","isIE","isEdge","loginType","getAccount","document","getElementById","onclick","loginRedirect","isCallback","location","hash"],"mappings":"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","sourcesContent":["import * as Msal from 'msal';\nimport CryptoJS from 'crypto-js';\nimport axios from 'axios';\nimport { notification } from 'antd';\nimport config from '../../config/api';\nimport { setToken } from '../../config/axios';\nimport { loginRequest, loginSuccess, loginFailure } from './LoginActions';\nimport { history } from '../../history';\n\nvar msalConfig = {\n    auth: {\n        clientId: '4a15d7d8-bd7a-4e72-a738-273afb93ff7f', //This is your client ID\n        authority: \"https://login.microsoftonline.com/058ffa1f-5c51-45d3-89a5-cff53e844deb\" //This is your tenant info\n    },\n    cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: true\n    }\n};\n\nvar graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n\n// create a request object for login or token request calls\n// In scenarios with incremental consent, the request object can be further customized\nvar requestObj = {\n    scopes: [\"user.read\"]\n};\n\nvar myMSALObj = new Msal.UserAgentApplication(msalConfig);\n\n// Register Callbacks for redirect flow\n// myMSALObj.handleRedirectCallbacks(acquireTokenRedirectCallBack, acquireTokenErrorRedirectCallBack);\nmyMSALObj.handleRedirectCallback(authRedirectCallBack);\n\nexport const signIn = (dispatch) => {\n    myMSALObj.loginPopup(requestObj).then(function (loginResponse) {\n        //Successful login\n        showWelcomeMessage();\n        //Call MS Graph using the token in the response\n        acquireTokenPopupAndCallMSGraph(dispatch);\n    }).catch(function (error) {\n        //Please check the console for errors\n        console.log(error);\n    });\n}\n\nexport const signOut = () => {\n    myMSALObj.logout();\n}\n\nfunction acquireTokenPopupAndCallMSGraph(dispatch) {\n    if (!dispatch)\n        return;\n    //Always start with acquireTokenSilent to obtain a token in the signed in user from cache\n    myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {\n        callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback, dispatch);\n    }).catch(function (error) {\n        console.log(error);\n        // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)\n        // Call acquireTokenPopup(popup window) \n        if (requiresInteraction(error.errorCode)) {\n            myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {\n                callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback, dispatch);\n            }).catch(function (error) {\n                console.log(error);\n            });\n        }\n    });\n}\n\nfunction callMSGraph(theUrl, accessToken, callback, dispatch) {\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200)\n            callback(JSON.parse(this.responseText), dispatch);\n    }\n    xmlHttp.open(\"GET\", theUrl, true); // true for asynchronous\n    xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);\n    xmlHttp.send();\n}\n\nfunction graphAPICallback(data, dispatch) {console.log(data,\"----------------------\")\n    if (!(typeof (data.mail) === 'string' && data.mail.length)) {\n        alert('You do not have access to this application!');\n        return;\n    }\n    var header = {\n        \"alg\": \"HS256\",\n        \"typ\": \"JWT\"\n    };\n    var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\n    var encodedHeader = base64url(stringifiedHeader);\n    var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n    var encodedData = base64url(stringifiedData);\n    var token = encodedHeader + \".\" + encodedData;\n    // with secret\n    var secret = \"9Us5BmR1ovVvMX88CZ89Assj730paYOBROdbfmOmOL3DLwAZJueWS\";\n    var signature = CryptoJS.HmacSHA256(token, secret);\n    signature = base64url(signature);\n    var signedToken = token + \".\" + signature;\n    dispatch(loginRequest());\n    axios({\n        method: 'post',\n        url: `${config.api.base_url}/api/auth/ms-login`,\n        data: { ms_token: signedToken }\n    })\n        .then(response => {\n            dispatch(loginSuccess(response.data));\n            setToken(response.data.token);\n            sessionStorage.setItem('user_token', response.data.token);\n            const default_route = response.data.user.department === 'SALES' || response.data.user.designation === 'POC' ? 'new' : 'active';\n            history.push('/tasks/' + default_route);\n        })\n        .catch((error) => {\n            console.error(error);\n            notification.error({\n                duration: 2,\n                message: 'Error',\n                description: 'Login Failure. Please try again or contact an administrator.'\n            });\n            dispatch(loginFailure());\n        });\n}\n\nfunction showWelcomeMessage() {\n    // var divWelcome = document.getElementById('WelcomeMessage');\n    // divWelcome.innerHTML = \"Welcome \" + myMSALObj.getAccount().userName + \" to Microsoft Graph API\";\n    // var loginbutton = document.getElementById('SignIn');\n    // loginbutton.innerHTML = 'Sign Out';\n    // loginbutton.setAttribute('onclick', 'signOut();');\n}\n\n//This function can be removed if you do not need to support IE\nfunction acquireTokenRedirectAndCallMSGraph() {\n    //Always start with acquireTokenSilent to obtain a token in the signed in user from cache\n    myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {\n        callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);\n    }).catch(function (error) {\n        console.log(error);\n        // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)\n        // Call acquireTokenRedirect\n        if (requiresInteraction(error.errorCode)) {\n            myMSALObj.acquireTokenRedirect(requestObj);\n        }\n    });\n}\n\nfunction authRedirectCallBack(error, response) {\n    if (error) {\n        console.log(error);\n    } else {\n        if (response.tokenType === \"access_token\") {\n            callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);\n        }\n    }\n}\n\nfunction requiresInteraction(errorCode) {\n    if (!errorCode || !errorCode.length) {\n        return false;\n    }\n    return errorCode === \"consent_required\" ||\n        errorCode === \"interaction_required\" ||\n        errorCode === \"login_required\";\n}\n\nfunction base64url(source) {\n    // Encode in classical base64\n    let encodedSource = CryptoJS.enc.Base64.stringify(source);\n\n    // Remove padding equal characters\n    encodedSource = encodedSource.replace(/=+$/, '');\n\n    // Replace characters according to base64url specifications\n    encodedSource = encodedSource.replace(/\\+/g, '-');\n    encodedSource = encodedSource.replace(/\\//g, '_');\n\n    return encodedSource;\n}\n\n// Browser check variables\nvar ua = window.navigator.userAgent;\nvar msie = ua.indexOf('MSIE ');\nvar msie11 = ua.indexOf('Trident/');\nvar msedge = ua.indexOf('Edge/');\nvar isIE = msie > 0 || msie11 > 0;\nvar isEdge = msedge > 0;\n\n//If you support IE, our recommendation is that you sign-in using Redirect APIs\n//If you as a developer are testing using Edge InPrivate mode, please add \"isEdge\" to the if check\n\n// can change this to default an experience outside browser use\nvar loginType = isIE ? \"REDIRECT\" : \"POPUP\";\n\n// runs on page load, change config to try different login types to see what is best for your application\nif (loginType === 'POPUP') {\n    if (myMSALObj.getAccount()) {// avoid duplicate code execution on page load in case of iframe and popup window.\n        showWelcomeMessage();\n        acquireTokenPopupAndCallMSGraph();\n    }\n}\nelse if (loginType === 'REDIRECT') {\n    document.getElementById(\"SignIn\").onclick = function () {\n        myMSALObj.loginRedirect(requestObj);\n    };\n\n    if (myMSALObj.getAccount() && !myMSALObj.isCallback(window.location.hash)) {// avoid duplicate code execution on page load in case of iframe and popup window.\n        showWelcomeMessage();\n        acquireTokenRedirectAndCallMSGraph();\n    }\n} else {\n    console.error('Please set a valid login type');\n}"]},"metadata":{},"sourceType":"module"}