{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { history } from '../../history';\nimport LoginComponent from './LoginComponent';\nimport LoginWrapper from './Login.style';\nimport { startLogin, loginFailure } from './LoginActions';\n\nvar LoginContainer = /*#__PURE__*/function (_React$Component) {\n  _inherits(LoginContainer, _React$Component);\n\n  var _super = _createSuper(LoginContainer);\n\n  _createClass(LoginContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Redirect the user if he is already logged in\n      if (this.props.IS_AUTH) {\n        history.push('/tasks/new');\n      }\n\n      sessionStorage.clear();\n    }\n  }]);\n\n  function LoginContainer() {\n    var _this;\n\n    _classCallCheck(this, LoginContainer);\n\n    _this = _super.call(this);\n    _this.handleSuccess = _this.handleSuccess.bind(_assertThisInitialized(_this));\n    _this.handleFailure = _this.handleFailure.bind(_assertThisInitialized(_this));\n    return _this;\n  } // Register login success in the application reducer\n\n\n  _createClass(LoginContainer, [{\n    key: \"handleSuccess\",\n    value: function handleSuccess(response) {\n      // this.props.startLogin(response.tokenId);\n      this.props.startLogin();\n    } // Register login failure on the application reducer\n\n  }, {\n    key: \"handleFailure\",\n    value: function handleFailure(response) {\n      this.props.loginFailure();\n      history.push('/');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(LoginWrapper, null, __jsx(LoginComponent, {\n        handleSuccess: this.handleSuccess,\n        handleFailure: this.handleFailure,\n        is_auth_attempt: this.props.IS_AUTH_ATTEMPT\n      }));\n    }\n  }]);\n\n  return LoginContainer;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    IS_AUTH: state.LOGINREDUCER.ISAUTH,\n    IS_AUTH_ATTEMPT: state.LOGINREDUCER.ISAUTHATTEMPT\n  };\n}\n\nvar mapDispatchToProps = {\n  startLogin: startLogin,\n  loginFailure: loginFailure\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);","map":{"version":3,"sources":["/home/mordortech/Documents/Mordor/Projects/inventory/pages/Login/LoginContainer.js"],"names":["React","connect","history","LoginComponent","LoginWrapper","startLogin","loginFailure","LoginContainer","props","IS_AUTH","push","sessionStorage","clear","handleSuccess","bind","handleFailure","response","IS_AUTH_ATTEMPT","Component","mapStateToProps","state","LOGINREDUCER","ISAUTH","ISAUTHATTEMPT","mapDispatchToProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,gBAAzC;;IAEMC,c;;;;;;;wCAEgB;AAClB;AACA,UAAG,KAAKC,KAAL,CAAWC,OAAd,EAAuB;AACrBP,QAAAA,OAAO,CAACQ,IAAR,CAAa,YAAb;AACD;;AACDC,MAAAA,cAAc,CAACC,KAAf;AACD;;;AAED,4BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,+BAArB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AAHY;AAIb,G,CAED;;;;;kCACcE,Q,EAAU;AACtB;AACA,WAAKR,KAAL,CAAWH,UAAX;AACD,K,CAED;;;;kCACcW,Q,EAAU;AACtB,WAAKR,KAAL,CAAWF,YAAX;AACAJ,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AACD;;;6BAEQ;AACL,aACE,MAAC,YAAD,QACE,MAAC,cAAD;AACE,QAAA,aAAa,EAAE,KAAKG,aADtB;AAEE,QAAA,aAAa,EAAE,KAAKE,aAFtB;AAGE,QAAA,eAAe,EAAE,KAAKP,KAAL,CAAWS;AAH9B,QADF,CADF;AASH;;;;EAtC0BjB,KAAK,CAACkB,S;;AAyCnC,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLX,IAAAA,OAAO,EAAEW,KAAK,CAACC,YAAN,CAAmBC,MADvB;AAELL,IAAAA,eAAe,EAAEG,KAAK,CAACC,YAAN,CAAmBE;AAF/B,GAAP;AAID;;AAED,IAAMC,kBAAkB,GAAG;AACzBnB,EAAAA,UAAU,EAAVA,UADyB;AAEzBC,EAAAA,YAAY,EAAZA;AAFyB,CAA3B;AAKA,eAAeL,OAAO,CAACkB,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CjB,cAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { history } from '../../history';\nimport LoginComponent from './LoginComponent';\nimport LoginWrapper from './Login.style';\nimport { startLogin, loginFailure } from './LoginActions';\n\nclass LoginContainer extends React.Component {\n\n  componentDidMount() {\n    // Redirect the user if he is already logged in\n    if(this.props.IS_AUTH) {\n      history.push('/tasks/new');\n    }\n    sessionStorage.clear();\n  }\n\n  constructor() {\n    super();\n    this.handleSuccess = this.handleSuccess.bind(this);\n    this.handleFailure = this.handleFailure.bind(this);\n  }\n\n  // Register login success in the application reducer\n  handleSuccess(response) {\n    // this.props.startLogin(response.tokenId);\n    this.props.startLogin();\n  }\n\n  // Register login failure on the application reducer\n  handleFailure(response) {\n    this.props.loginFailure();\n    history.push('/');\n  }\n\n  render() {\n      return (\n        <LoginWrapper>\n          <LoginComponent\n            handleSuccess={this.handleSuccess}\n            handleFailure={this.handleFailure}\n            is_auth_attempt={this.props.IS_AUTH_ATTEMPT}\n          />\n        </LoginWrapper>\n      );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    IS_AUTH: state.LOGINREDUCER.ISAUTH,\n    IS_AUTH_ATTEMPT: state.LOGINREDUCER.ISAUTHATTEMPT\n  }\n}\n\nconst mapDispatchToProps = {\n  startLogin,\n  loginFailure,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer);"]},"metadata":{},"sourceType":"module"}