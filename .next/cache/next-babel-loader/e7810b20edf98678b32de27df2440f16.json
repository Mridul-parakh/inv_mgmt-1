{"ast":null,"code":"import axios from 'axios';\nimport { notification } from 'antd';\nimport { history } from '../history';\nimport configureStore from '../redux/store';\nconst instance = axios.create({});\nlet token = sessionStorage.getItem('user_token');\n\nif (token) {\n  instance.defaults.headers.common['Authorization'] = token;\n} // Setting a default timeout\n\n\ninstance.defaults.timeout = 120000;\ninstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  console.error('request error');\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response.status === 401) {\n    configureStore.store.dispatch({\n      type: 'LOGOUT_SUCCESS'\n    });\n    history.push('/login'); // sessionStorage.clear();\n  } else if (error.response.status === 500) {\n    history.goBack();\n    notification.error({\n      message: 'Error',\n      description: 'Something went wrong. Please try again!'\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport const setToken = token => {\n  instance.defaults.headers.common['Authorization'] = token;\n};\nexport default instance;","map":{"version":3,"sources":["/home/mordortech/Documents/Mordor/Projects/inventory/pages/config/axios.js"],"names":["axios","notification","history","configureStore","instance","create","token","sessionStorage","getItem","defaults","headers","common","timeout","interceptors","request","use","config","error","console","Promise","reject","response","status","store","dispatch","type","push","goBack","message","description","setToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa,EAAb,CAAjB;AAEA,IAAIC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,YAAvB,CAAZ;;AACA,IAAIF,KAAJ,EAAW;AACTF,EAAAA,QAAQ,CAACK,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAoDL,KAApD;AACD,C,CAED;;;AACAF,QAAQ,CAACK,QAAT,CAAkBG,OAAlB,GAA4B,MAA5B;AAEAR,QAAQ,CAACS,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUC,MAAV,EAAkB;AAClD,SAAOA,MAAP;AACD,CAFD,EAEG,UAAUC,KAAV,EAAiB;AAClBC,EAAAA,OAAO,CAACD,KAAR,CAAc,eAAd;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CALD;AAOAb,QAAQ,CAACS,YAAT,CAAsBQ,QAAtB,CAA+BN,GAA/B,CAAmC,UAAUM,QAAV,EAAoB;AACrD,SAAOA,QAAP;AACD,CAFD,EAEG,UAAUJ,KAAV,EAAiB;AAClB,MAAIA,KAAK,CAACI,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACjCnB,IAAAA,cAAc,CAACoB,KAAf,CAAqBC,QAArB,CAA8B;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA9B;AACAvB,IAAAA,OAAO,CAACwB,IAAR,CAAa,QAAb,EAFiC,CAIjC;AACD,GALD,MAMK,IAAIT,KAAK,CAACI,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;AACtCpB,IAAAA,OAAO,CAACyB,MAAR;AACA1B,IAAAA,YAAY,CAACgB,KAAb,CAAmB;AACjBW,MAAAA,OAAO,EAAE,OADQ;AAEjBC,MAAAA,WAAW,EAAE;AAFI,KAAnB;AAID;;AAED,SAAOV,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAlBD;AAoBA,OAAO,MAAMa,QAAQ,GAAIxB,KAAD,IAAW;AACjCF,EAAAA,QAAQ,CAACK,QAAT,CAAkBC,OAAlB,CAA0BC,MAA1B,CAAiC,eAAjC,IAAoDL,KAApD;AACD,CAFM;AAIP,eAAeF,QAAf","sourcesContent":["import axios from 'axios';\nimport { notification } from 'antd';\nimport { history } from '../history';\nimport configureStore from '../redux/store';\n\nconst instance = axios.create({});\n\nlet token = sessionStorage.getItem('user_token');\nif (token) {\n  instance.defaults.headers.common['Authorization'] = token;\n}\n\n// Setting a default timeout\ninstance.defaults.timeout = 120000;\n\ninstance.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  console.error('request error');\n  return Promise.reject(error);\n});\n\ninstance.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response.status === 401) {\n    configureStore.store.dispatch({ type: 'LOGOUT_SUCCESS' })\n    history.push('/login');\n\n    // sessionStorage.clear();\n  }\n  else if (error.response.status === 500) {\n    history.goBack();\n    notification.error({\n      message: 'Error',\n      description: 'Something went wrong. Please try again!'\n    })\n  }\n\n  return Promise.reject(error);\n});\n\nexport const setToken = (token) => {\n  instance.defaults.headers.common['Authorization'] = token;\n}\n\nexport default instance;"]},"metadata":{},"sourceType":"module"}